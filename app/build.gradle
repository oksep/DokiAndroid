apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion builds.compileSdkVersion
    defaultConfig {
        multiDexEnabled true
        applicationId builds.packageName
        minSdkVersion builds.minSdkVersion
        targetSdkVersion builds.targetSdkVersion
        versionCode builds.versionCode
        versionName builds.versionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        renderscriptTargetApi builds.renderScriptTarget
        renderscriptSupportModeEnabled true
    }

    dataBinding {
        enabled = true
    }

    dexOptions {
        additionalParameters += '--minimal-main-dex'
        keepRuntimeAnnotatedClasses = false
    }

    signingConfigs {
        release {
            def propFile = keystoreFile()
            if (propFile.exists()) {
                Properties p = new Properties()
                p.load(new FileInputStream(propFile))
                storeFile file(p['storeFile'])
                storePassword p['storePassword']
                keyAlias p['keyAlias']
                keyPassword p['keyPassword']
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            if (keystoreFile().exists()) signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            matchingFallbacks = ['debug']
            ndk {
                abiFilters "armeabi-v7a"
            }
        }
        debug {
            minifyEnabled false
            shrinkResources false
            if (keystoreFile().exists()) signingConfig signingConfigs.release
            matchingFallbacks = ['debug']
            ndk {
                abiFilters "x86", "armeabi-v7a"
            }
        }

        applicationVariants.all { variant ->
            variant.outputs.all { output ->
                // def flavor = variant.productFlavors[0].name
                def buildType = variant.variantData.variantConfiguration.buildType.name
                def version = variant.versionName
                def versionCode = variant.versionCode
                def date = new Date()
                def formattedDate = date.format('yyyy-MM-dd-HH:mm:ss')
                def outputFileName = "${buildType}_${version}_${versionCode}_${formattedDate}.apk"
                // def rootDir = output.packageApplication.outputDirectory.toPath().relativize(rootDir.toPath()).toFile()
                // output.outputFileName = new File("$rootDir/release", outputFileName)
                output.outputFileName = new File("../../../../../apks/${buildType}/", outputFileName)
            }
        }
    }
}

def keystoreFile() {
     return file('./keystore/keystore.properties')
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    // android-x
    implementation "androidx.multidex:multidex:${versions.multiDex}"
    implementation "androidx.appcompat:appcompat:${versions.axCompat}"
    implementation "androidx.constraintlayout:constraintlayout:${versions.axConstraintLayout}"
    implementation "androidx.lifecycle:lifecycle-extensions:${versions.axLifecycle}"
    implementation "com.google.android.material:material:${versions.axMaterial}"
    implementation "androidx.cardview:cardview:${versions.axCardView}"
    implementation "androidx.core:core-ktx:${versions.axKtx}"

    // test
    testImplementation "junit:junit:${versions.testJunit}"
    androidTestImplementation "androidx.test:runner:${versions.testAxRunner}"
    androidTestImplementation "androidx.test.espresso:espresso-core:${versions.testAxEspresso}"

    // network
    implementation "com.squareup.retrofit2:retrofit:${versions.retrofit}"
    implementation "com.squareup.retrofit2:adapter-rxjava2:${versions.retorfiAdapterRxJava}"
    implementation "com.squareup.retrofit2:converter-gson:${versions.retrofitGson}"
    implementation "com.squareup.retrofit2:converter-scalars:${versions.retrofitScalars}"
    implementation "com.squareup.okhttp3:okhttp:${versions.okhttp}"
    implementation "com.squareup.okhttp3:logging-interceptor:${versions.okhttpLog}"

    // util
    implementation "com.google.code.gson:gson:${versions.gson}"
    implementation "io.reactivex.rxjava2:rxjava:${versions.rxjava2}"
    implementation "io.reactivex.rxjava2:rxandroid:${versions.rxjava2Android}"
    implementation "com.github.bumptech.glide:glide:${versions.glide}"
    implementation "com.github.bumptech.glide:annotations:${versions.glide}"
    kapt "com.github.bumptech.glide:compiler:${versions.glide}"
    implementation "com.github.bumptech.glide:okhttp3-integration:${versions.glide}"
    dependencies {
        implementation "org.permissionsdispatcher:permissionsdispatcher:${versions.permissionDispatcher}"
        kapt "org.permissionsdispatcher:permissionsdispatcher-processor:${versions.permissionDispatcher}"
    }

    // ui
    implementation "com.makeramen:roundedimageview:${versions.roundImageView}"
    implementation "com.jaeger.ninegridimageview:library:${versions.nineGridImageView}"

    // baseline
    implementation project(':center')
    implementation project(':ui')
    implementation project(':social')

    // feature plugin
    implementationFeature(':home')
    implementationFeature(':auth')
    implementationFeature(':profile')
    implementationFeature(':web')
    implementationFeature(':login')
    implementationFeature(':timeline')
    implementationFeature(':feed')
    implementationFeature(':update')
    implementationFeature(':location')
    implementationFeature(':message')
    implementationFeature(':uikit')

    // admin feature for debug
    debugImplementation project(':admin')
}